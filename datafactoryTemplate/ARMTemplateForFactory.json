{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Nom de fabrique de données"
        },
        "JiraBaseAPI_password": {
            "type": "secureString",
            "metadata": "Chaîne sécurisée pour « password » de « JiraBaseAPI »"
        },
        "Jira_DB_password": {
            "type": "secureString",
            "metadata": "Chaîne sécurisée pour « password » de « Jira_DB »"
        },
        "JiraBaseAPI_properties_typeProperties_url": {
            "type": "string"
        },
        "JiraBaseAPI_properties_typeProperties_userName": {
            "type": "string"
        },
        "Jira_DB_properties_typeProperties_server": {
            "type": "string"
        },
        "Jira_DB_properties_typeProperties_database": {
            "type": "string"
        },
        "Jira_DB_properties_typeProperties_userName": {
            "type": "string"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [

{
  "type": "Microsoft.DataFactory/factories",
  "apiVersion": "2018-06-01",
  "name": "[parameters('factoryName')]",
  "location": "[resourceGroup().location]",
  "identity": {
    "type": "SystemAssigned"
  }
}?


        
        {
            "name": "[concat(parameters('factoryName'), '/ETL_Pipeline')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ETL_Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2025-06-11T15:00:00",
                        "timeZone": "W. Central Africa Standard Time",
                        "schedule": {}
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ETL_Pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/JiraBaseAPI')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('JiraBaseAPI_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('JiraBaseAPI_properties_typeProperties_userName')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('JiraBaseAPI_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'),'/', parameters('Jira_DB_properties_typeProperties_database'))]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "server": "[parameters('Jira_DB_properties_typeProperties_server')]",
                    "database": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "encrypt": "mandatory",
                    "trustServerCertificate": false,
                    "authenticationType": "SQL",
                    "userName": "[parameters('Jira_DB_properties_typeProperties_userName')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('Jira_DB_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ETL_Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Board_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Board_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "extractBoardData": {},
                                    "source1": {},
                                    "sink1": {},
                                    "chargerBoardDim": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "IssueType_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Board_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "IssueType_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "sink1": {},
                                    "sink2": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Priority_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "IssueStatus_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Priority_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "sink1": {},
                                    "sink2": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "IssueStatus_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "IssueType_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "IssueStatus_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "sink1": {},
                                    "sink2": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Select BoardId",
                        "type": "Lookup",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Priority_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select board_id_PK as boardId from board_dim",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "Board_Dim",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach BoardId",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Select BoardId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Select BoardId').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Sprint_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Project_DF",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Sprint_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "boardId": {
                                                    "value": "@item().boardId",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "boardId": {
                                                        "value": "@item().boardId",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "SprintFinal": {},
                                                "sink1": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Project_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Issue_IDs_DF",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Project_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "boardId": {
                                                    "value": "@item().boardId",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "ExtractProjectFromAPI": {
                                                    "boardId": "@item().boardId"
                                                },
                                                "source1": {},
                                                "sink2": {},
                                                "sink3": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Issue_IDs_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Issue_IDs_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "boardId": {
                                                    "value": "@item().boardId",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "extractIssueData": {
                                                    "boardId": "@item().boardId"
                                                },
                                                "source1": {},
                                                "sink1": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "select issue id",
                        "type": "Lookup",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ForEach BoardId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select issue_id_PK as id from issue_dim",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach issue id",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "select issue id",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('select issue id').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Issue_DF",
                                    "type": "ExecuteDataFlow",
                                    "state": "Inactive",
                                    "onInactiveMarkAs": "Succeeded",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Issue_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": {
                                                        "value": "@item().id",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Worklog_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Issue_DF",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Worklog_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": {
                                                        "value": "@item().id",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "sink1": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "UserFromIssue_DF",
                                    "type": "ExecuteDataFlow",
                                    "state": "Inactive",
                                    "onInactiveMarkAs": "Succeeded",
                                    "dependsOn": [
                                        {
                                            "activity": "Worklog_DF",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "UserFromIssue_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": {
                                                        "value": "@item().id",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "sink1": {},
                                                "sink2": {},
                                                "sink3": {},
                                                "sink4": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Date_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ForEach issue id",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Date_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "source3": {},
                                    "source4": {},
                                    "source5": {},
                                    "source6": {},
                                    "source7": {},
                                    "dateFinal": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Time_DF",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Date_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Time_DF",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Select BoardId pour les fact tables",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ForEach ProjectId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select board_id_PK as boardId from board_dim",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "Board_Dim",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach BoardId pour les fact tables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Select BoardId pour les fact tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Select BoardId pour les fact tables').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Sprint_Fact_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Sprint_Fact_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "boardId": {
                                                    "value": "@item().boardId",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "boardId": "@item().boardId"
                                                },
                                                "source2": {},
                                                "DateDim": {},
                                                "sink2": {},
                                                "sink3": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "select issue ids pour les fact tables",
                        "type": "Lookup",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "ForEach BoardId pour les fact tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select issue_id_PK as id from issue_dim",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach issue id pour les fact tables",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "select issue ids pour les fact tables",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('select issue ids pour les fact tables').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Issue_Fact_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Issue_Fact_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": "@item().id"
                                                },
                                                "source4": {},
                                                "source5": {},
                                                "sink1": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                },
                                {
                                    "name": "Worklog_Fact_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [
                                        {
                                            "activity": "Issue_Fact_DF",
                                            "dependencyConditions": [
                                                "Completed"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "Worklog_Fact_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "id": {
                                                    "value": "@item().id",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "id": {
                                                        "value": "@item().id",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "source2": {},
                                                "source3": {},
                                                "source4": {},
                                                "sink1": {},
                                                "sink2": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Select ProjectId",
                        "type": "Lookup",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Time_DF",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select  project_id_PK as projectId from project_dim",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "Project_dim",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach ProjectId",
                        "type": "ForEach",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [
                            {
                                "activity": "Select ProjectId",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Select ProjectId').output.value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "UserFromProject_DF",
                                    "type": "ExecuteDataFlow",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataflow": {
                                            "referenceName": "UserFromProject_DF",
                                            "type": "DataFlowReference",
                                            "parameters": {
                                                "projectId": {
                                                    "value": "@item().ProjectId",
                                                    "type": "Expression"
                                                }
                                            },
                                            "datasetParameters": {
                                                "source1": {
                                                    "project_id": "@item().ProjectId"
                                                },
                                                "source2": {},
                                                "sink2": {},
                                                "sink3": {}
                                            }
                                        },
                                        "staging": {},
                                        "compute": {
                                            "coreCount": 8,
                                            "computeType": "General"
                                        },
                                        "traceLevel": "Fine"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "boardId": {
                        "type": "int",
                        "defaultValue": 5
                    },
                    "id": {
                        "type": "int",
                        "defaultValue": 10003
                    },
                    "projectId": {
                        "type": "int",
                        "defaultValue": 10000
                    }
                },
                "annotations": [],
                "lastPublishTime": "2025-06-13T21:06:49Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Board_DF')]",
                "[concat(variables('factoryId'), '/dataflows/IssueType_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Priority_DF')]",
                "[concat(variables('factoryId'), '/dataflows/IssueStatus_DF')]",
                "[concat(variables('factoryId'), '/datasets/Board_Dim')]",
                "[concat(variables('factoryId'), '/datasets/Issue_Dim')]",
                "[concat(variables('factoryId'), '/dataflows/Date_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Time_DF')]",
                "[concat(variables('factoryId'), '/datasets/Project_dim')]",
                "[concat(variables('factoryId'), '/dataflows/Sprint_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Project_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Issue_IDs_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Issue_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Worklog_DF')]",
                "[concat(variables('factoryId'), '/dataflows/UserFromIssue_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Sprint_Fact_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Issue_Fact_DF')]",
                "[concat(variables('factoryId'), '/dataflows/Worklog_Fact_DF')]",
                "[concat(variables('factoryId'), '/dataflows/UserFromProject_DF')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IssueType_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/api/2/issuetype"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Status_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/api/2/status"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/date_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "date_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "date",
                        "type": "date"
                    },
                    {
                        "name": "year",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "month",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "quarter",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "day",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "weekday",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "date_dim"
                }
            },
            "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Board_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "board_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "board_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "type",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Board_dim"
                }
            },
            "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Priority_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "priority_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "priority_name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Priority_dim"
                }
            },
            "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Issue_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "issue_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Agg_Progress",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Agg_Progress_Total",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Agg_TimeSpent",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Agg_TimeEstimate",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "creation_date",
                        "type": "date"
                    },
                    {
                        "name": "resolution_date",
                        "type": "date"
                    },
                    {
                        "name": "due_date",
                        "type": "date"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Issue_dim"
                }
            },
           "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Time_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "time_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "time",
                        "type": "nvarchar"
                    },
                    {
                        "name": "hour",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "minute",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "second",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "time_dim"
                }
            },
            "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Board_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/agile/1.0/board"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Worklog_Fact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/FactTables"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "issue_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "worklog_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "author_id_FK",
                        "type": "nvarchar"
                    },
                    {
                        "name": "startTime_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "startDate_FK",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "worklog_fact"
                }
            },
           "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ProjectDetail_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "project_id": {
                        "type": "string",
                        "defaultValue": "10000"
                    }
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/api/2/project/@{dataset().project_id}",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Sprint_Fact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/FactTables"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "sprint_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "board_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "complete_date_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "start_date_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "end_date_FK",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "sprint_fact"
                }
            },
            "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Issue_Fact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/FactTables"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "issue_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "project_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "issueType_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "issueStatus_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "priority_id_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "creator_id_FK",
                        "type": "nvarchar"
                    },
                    {
                        "name": "creation_date_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "resolution_date_FK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "due_date_FK",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "issue_fact"
                }
            },
             "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Sprint_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "sprint_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "sprint_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "start_date",
                        "type": "date"
                    },
                    {
                        "name": "end_date",
                        "type": "date"
                    },
                    {
                        "name": "complete_date",
                        "type": "date"
                    },
                    {
                        "name": "state",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "sprint_dim"
                }
            },
           "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Sprint_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "boardId": {
                        "type": "string",
                        "defaultValue": "5"
                    }
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/agile/1.0/board/@{dataset().boardId}/sprint",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IssueStatus_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "status_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "status_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "statusCategory",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "issueStatus_dim"
                }
            },
          "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Worklog_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "worklog_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "start_date",
                        "type": "date"
                    },
                    {
                        "name": "start_time",
                        "type": "nvarchar"
                    },
                    {
                        "name": "timespent",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "worklog_dim"
                }
            },
           "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IssueType_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "type_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "type_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "subtask",
                        "type": "nvarchar"
                    },
                    {
                        "name": "hierarchyLevel",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "IssueType_dim"
                }
            },
          "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Issue_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "boardId": {
                        "type": "string",
                        "defaultValue": "5"
                    }
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/agile/1.0/board/@{dataset().boardId}/issue",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Project_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "boardId": {
                        "type": "string",
                        "defaultValue": "5"
                    }
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/agile/1.0/board/@{dataset().boardId}/project",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IssueDetail_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "id": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/api/2/issue/@{dataset().id}",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Worklog_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "id": {
                        "type": "string",
                        "defaultValue": "10000"
                    }
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "/rest/api/2/issue/@{dataset().id}/worklog",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Priority_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "JiraBaseAPI",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "API REST"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": "/rest/api/2/priority"
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/JiraBaseAPI')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Project_dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "project_id_PK",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "project_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "project_typeKey",
                        "type": "nvarchar"
                    },
                    {
                        "name": "project_key",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "project_dim"
                }
            },
            "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/User_Dim')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "[parameters('Jira_DB_properties_typeProperties_database')]",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SQL_Tables/Dimensions"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "user_id_PK",
                        "type": "nvarchar"
                    },
                    {
                        "name": "display_name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "accountType",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "User_dim"
                }
            },
            "dependsOn": [
                 "[resourceId('Microsoft.DataFactory/factories/linkedServices', parameters('factoryName'), parameters('Jira_DB_properties_typeProperties_database'))]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Board_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Board_API",
                                "type": "DatasetReference"
                            },
                            "name": "extractBoardData"
                        },
                        {
                            "dataset": {
                                "referenceName": "Board_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Board_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Board_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "chargerBoardDim"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "SelectionnerLesColonnes"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "AlreadyExist",
                            "description": "verifier si le board existe deja (true)"
                        },
                        {
                            "name": "alterRow1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          body as (isLast as boolean, maxResults as short, startAt as boolean, total as short, values as (id as short, isPrivate as boolean, location as (avatarURI as string, displayName as string, name as string, projectId as short, projectKey as string, projectName as string, projectTypeKey as string), name as string, self as string, type as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> extractBoardData",
                        "source(output(",
                        "          board_id_PK as integer,",
                        "          board_name as string,",
                        "          type as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select board_id_PK from board_dim',",
                        "     format: 'query') ~> source1",
                        "extractBoardData foldDown(unroll(body.values, body.values),",
                        "     mapColumn(",
                        "          Boardid = body.values.id,",
                        "          name = body.values.name,",
                        "          type = body.values.type",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> SelectionnerLesColonnes",
                        "SelectionnerLesColonnes, source1 exists(Boardid==board_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "SelectionnerLesColonnes, source1 exists(Boardid==board_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> AlreadyExist",
                        "AlreadyExist alterRow(updateIf(Boardid>0)) ~> alterRow1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          board_id_PK as integer,",
                        "          board_name as string,",
                        "          type as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['board_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          board_id_PK = Boardid,",
                        "          board_name = name,",
                        "          type",
                        "     )) ~> sink1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          board_id_PK as integer,",
                        "          board_name as string,",
                        "          type as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          board_id_PK = Boardid,",
                        "          board_name = name,",
                        "          type",
                        "     )) ~> chargerBoardDim"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Board_API')]",
                "[concat(variables('factoryId'), '/datasets/Board_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Issue_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueDetail_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow2"
                        },
                        {
                            "name": "derivedColumn2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer",
                        "}",
                        "source(output(",
                        "          body as (expand as string, fields as (aggregateprogress as (percent as short, progress as integer, total as integer), aggregatetimeestimate as integer, aggregatetimeoriginalestimate as string, aggregatetimespent as integer, assignee as string, attachment as string[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as string[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10015 as date, customfield_10017 as string, customfield_10019 as string, customfield_10021 as string, customfield_10032 as string, description as string, duedate as date, environment as string, fixVersions as string[], issuelinks as string[], issuerestriction as (shouldDisplay as boolean), issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, priority as (iconUrl as string, id as short, name as string, self as string), progress as (percent as short, progress as integer, total as integer), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as string, resolutiondate as string, security as string, status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as integer, timeoriginalestimate as string, timespent as integer, timetracking as (remainingEstimate as double, remainingEstimateSeconds as integer, timeSpent as string, timeSpentSeconds as integer), updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as boolean, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]), workratio as short), id as short, key as string, self as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          issue_id_PK as integer,",
                        "          Agg_Progress as integer,",
                        "          Agg_Progress_Total as integer,",
                        "          Agg_TimeSpent as integer,",
                        "          Agg_TimeEstimate as integer,",
                        "          creation_date as date,",
                        "          resolution_date as date,",
                        "          due_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 select(mapColumn(",
                        "          Agg_progress = body.fields.aggregateprogress.progress,",
                        "          Agg_percent = body.fields.aggregateprogress.percent,",
                        "          Agg_total = body.fields.aggregateprogress.total,",
                        "          aggregatetimeestimate = body.fields.aggregatetimeestimate,",
                        "          aggregatetimeoriginalestimate = body.fields.aggregatetimeoriginalestimate,",
                        "          aggregatetimespent = body.fields.aggregatetimespent,",
                        "          accountId = body.fields.creator.accountId,",
                        "          summary = body.fields.description,",
                        "          duedate = body.fields.duedate,",
                        "          projectId = body.fields.project.id,",
                        "          TypeId = body.fields.issuetype.id,",
                        "          priorityId = body.fields.priority.id,",
                        "          statusId = body.fields.status.id,",
                        "          resolutiondate = body.fields.resolutiondate,",
                        "          id = body.id,",
                        "          progprogress = body.fields.progress.progress,",
                        "          percent = body.fields.progress.percent,",
                        "          progtotal = body.fields.progress.total,",
                        "          accountType = body.fields.creator.accountType,",
                        "          displayName = body.fields.creator.displayName,",
                        "          created = body.fields.created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "source2 select(mapColumn(",
                        "          id = issue_id_PK",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select1, select2 exists(select1@id == select2@id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn2 alterRow(upsertIf(0===0)) ~> alterRow2",
                        "exists2 derive(createdDateFinal = toDate(substring(created, 0, 10), 'yyyy-MM-dd'),",
                        "          resolutionDateFinal = toDate(substring(resolutiondate, 0, 10), 'yyyy-MM-dd')) ~> derivedColumn2",
                        "alterRow2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          issue_id_PK as integer,",
                        "          Agg_Progress as integer,",
                        "          Agg_Progress_Total as integer,",
                        "          Agg_TimeSpent as integer,",
                        "          Agg_TimeEstimate as integer,",
                        "          creation_date as date,",
                        "          resolution_date as date,",
                        "          due_date as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:false,",
                        "     updateable:false,",
                        "     upsertable:true,",
                        "     keys:['issue_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          issue_id_PK = id,",
                        "          due_date = duedate,",
                        "          Agg_Progress_Total = Agg_total,",
                        "          Agg_Progress = Agg_progress,",
                        "          Agg_TimeEstimate = aggregatetimeestimate,",
                        "          Agg_TimeSpent = aggregatetimespent,",
                        "          resolution_date = resolutionDateFinal,",
                        "          creation_date = createdDateFinal",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueDetail_API')]",
                "[concat(variables('factoryId'), '/datasets/Issue_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IssueType_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueType_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueType_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "IssueType_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueType_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        },
                        {
                            "name": "derivedColumn3"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          body as (avatarId as short, description as string, hierarchyLevel as short, iconUrl as string, id as short, name as string, scope as (project as (id as short), type as string), self as string, subtask as boolean, untranslatedName as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          type_id_PK as integer,",
                        "          type_name as string,",
                        "          subtask as string,",
                        "          hierarchyLevel as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "exists1 derive(subtaskFinal = toInteger(iif(body.subtask==true(), 1, 0))) ~> derivedColumn1",
                        "source1, source2 exists(body.id == type_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "source1, source2 exists(body.id == type_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn3 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists2 derive(subtaskFinal = toInteger(iif(body.subtask==true(), 1, 0))) ~> derivedColumn2",
                        "derivedColumn2 derive(subtaskFinal = toInteger(iif(body.subtask==true(), 1, 0))) ~> derivedColumn3",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          type_id_PK as integer,",
                        "          type_name as string,",
                        "          subtask as string,",
                        "          hierarchyLevel as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          type_id_PK = body.id,",
                        "          subtask = subtaskFinal,",
                        "          hierarchyLevel = body.hierarchyLevel,",
                        "          type_name = body.name",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          type_id_PK as integer,",
                        "          type_name as string,",
                        "          subtask as string,",
                        "          hierarchyLevel as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['type_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          type_id_PK = body.id,",
                        "          subtask = subtaskFinal,",
                        "          hierarchyLevel = body.hierarchyLevel,",
                        "          type_name = body.name",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueType_API')]",
                "[concat(variables('factoryId'), '/datasets/IssueType_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Project_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Project_API",
                                "type": "DatasetReference"
                            },
                            "name": "ExtractProjectFromAPI"
                        },
                        {
                            "dataset": {
                                "referenceName": "Project_dim",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Project_dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "Project_dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "exists3"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     boardId as integer (5)",
                        "}",
                        "source(output(",
                        "          body as (isLast as boolean, maxResults as short, startAt as boolean, total as boolean, values as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> ExtractProjectFromAPI",
                        "source(output(",
                        "          project_id_PK as integer,",
                        "          project_name as string,",
                        "          project_typeKey as string,",
                        "          project_key as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "ExtractProjectFromAPI foldDown(unroll(body.values, body.values),",
                        "     mapColumn(",
                        "          id = body.values.id,",
                        "          key = body.values.key,",
                        "          name = body.values.name,",
                        "          projectTypeKey = body.values.projectTypeKey",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "flatten1 derive(boardId = $boardId) ~> derivedColumn1",
                        "derivedColumn1, source1 exists(id == project_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 alterRow(upsertIf(isInteger(toString($boardId)))) ~> alterRow1",
                        "derivedColumn1, source1 exists(project_id_PK == id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists3",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          project_id_PK as integer,",
                        "          project_name as string,",
                        "          project_typeKey as string,",
                        "          project_key as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['project_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          project_id_PK = id,",
                        "          project_name = name,",
                        "          project_key = key,",
                        "          project_typeKey = projectTypeKey",
                        "     )) ~> sink2",
                        "exists3 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          project_id_PK as integer,",
                        "          project_name as string,",
                        "          project_typeKey as string,",
                        "          project_key as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          project_id_PK = id,",
                        "          project_name = name,",
                        "          project_typeKey = projectTypeKey,",
                        "          project_key = key",
                        "     )) ~> sink3"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Project_API')]",
                "[concat(variables('factoryId'), '/datasets/Project_dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Sprint_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Sprint_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Sprint_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Sprint_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "SprintFinal"
                        },
                        {
                            "dataset": {
                                "referenceName": "Sprint_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "derivedColumn2"
                        },
                        {
                            "name": "alterRow2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     boardId as integer (5)",
                        "}",
                        "source(output(",
                        "          body as (isLast as boolean, maxResults as short, startAt as boolean, total as short, values as (completeDate as string, createdDate as string, endDate as string, goal as string, id as short, name as string, originBoardId as short, self as string, startDate as string, state as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          sprint_id_PK as integer,",
                        "          sprint_name as string,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          complete_date as date,",
                        "          state as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 foldDown(unroll(body.values, body.values),",
                        "     mapColumn(",
                        "          id = body.values.id,",
                        "          name = body.values.name,",
                        "          startDate = body.values.startDate,",
                        "          endDate = body.values.endDate,",
                        "          state = body.values.state,",
                        "          completeDate = body.values.completeDate,",
                        "          originBoardId = body.values.originBoardId",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "exists1 derive(endDateFinal = toDate(substring(endDate,0,10)),",
                        "          startDateFinal = toDate(substring(startDate,0,10)),",
                        "          completeDateFinal = toDate(substring(completeDate,0,10)),",
                        "          EnRetard = iif(\r",
                        "    toDate(endDate) < toDate(completeDate)\r",
                        "    || (isNull(completeDate) && toDate(endDate) < currentDate()), \r",
                        "    1, \r",
                        "    0\r",
                        ")) ~> derivedColumn1",
                        "flatten1, source2 exists(id == sprint_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1, source2 exists(id == sprint_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 derive(endDateFinal = toDate(substring(endDate,0,10)),",
                        "          startDateFinal = toDate(substring(startDate,0,10)),",
                        "          completeDateFinal = toDate(substring(completeDate,0,10)),",
                        "          EnRetard = iif(    toDate(endDate) < toDate(completeDate)    || (isNull(completeDate) && toDate(endDate) < currentDate()),     1,     0)) ~> derivedColumn2",
                        "derivedColumn2 alterRow(updateIf(0===0)) ~> alterRow2",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_id_PK as integer,",
                        "          sprint_name as string,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          complete_date as date,",
                        "          state as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          sprint_id_PK = id,",
                        "          start_date = startDateFinal,",
                        "          end_date = endDateFinal,",
                        "          state,",
                        "          sprint_name = name,",
                        "          complete_date = completeDateFinal",
                        "     )) ~> SprintFinal",
                        "alterRow2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_id_PK as integer,",
                        "          sprint_name as string,",
                        "          start_date as date,",
                        "          end_date as date,",
                        "          complete_date as date,",
                        "          state as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['sprint_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          sprint_id_PK = id,",
                        "          start_date = startDateFinal,",
                        "          end_date = endDateFinal,",
                        "          state,",
                        "          sprint_name = name,",
                        "          complete_date = completeDateFinal",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Sprint_API')]",
                "[concat(variables('factoryId'), '/datasets/Sprint_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UserFromIssue_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueDetail_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        },
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink4"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "exists3"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "exists4"
                        },
                        {
                            "name": "alterRow2"
                        },
                        {
                            "name": "split1"
                        },
                        {
                            "name": "split2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10009)",
                        "}",
                        "source(output(",
                        "          body as (expand as string, fields as (aggregateprogress as (progress as boolean, total as boolean), aggregatetimeestimate as string, aggregatetimeoriginalestimate as string, aggregatetimespent as string, assignee as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, self as string, timeZone as string), attachment as string[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as (id as short, name as string, self as string)[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10002 as string[], customfield_10003 as string, customfield_10004 as string, customfield_10005 as string, customfield_10006 as string, customfield_10007 as string, customfield_10008 as string, customfield_10009 as string, customfield_10010 as string, customfield_10011 as string, customfield_10012 as (id as short, self as string, value as string), customfield_10013 as string, customfield_10014 as string, customfield_10015 as string, customfield_10016 as string, customfield_10017 as string, customfield_10018 as (hasEpicLinkFieldDependency as boolean, nonEditableReason as (message as string, reason as string), showField as boolean), customfield_10019 as string, customfield_10020 as string, customfield_10021 as string, customfield_10022 as string, customfield_10023 as string, customfield_10024 as string, customfield_10025 as string, customfield_10026 as string, customfield_10027 as string, customfield_10028 as string, customfield_10029 as string, customfield_10030 as string, customfield_10031 as string, customfield_10032 as string, customfield_10034 as string, customfield_10035 as string, customfield_10036 as string, customfield_10037 as string, customfield_10038 as string[], customfield_10039 as string, customfield_10040 as string, customfield_10041 as string, customfield_10042 as string, customfield_10043 as string, customfield_10044 as string, customfield_10045 as string, customfield_10046 as string, customfield_10047 as string[], customfield_10048 as string, customfield_10049 as string, customfield_10050 as string, customfield_10051 as string, customfield_10052 as string, customfield_10053 as string, customfield_10056 as string, description as string, duedate as string, environment as string, fixVersions as (archived as boolean, id as short, name as string, released as boolean, self as string)[], issuelinks as string[], issuetype as (description as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, priority as (iconUrl as string, id as short, name as string, self as string), progress as (progress as boolean, total as boolean), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as string, resolutiondate as string, security as string, status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as string, timeoriginalestimate as string, timespent as string, updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as boolean, worklogs as string[]), workratio as short), id as short, key as string, self as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 select(mapColumn(",
                        "          creatorId = body.fields.assignee.accountId,",
                        "          accountType = body.fields.assignee.accountType,",
                        "          displayName = body.fields.assignee.displayName",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "source1 select(mapColumn(",
                        "          creatorId = body.fields.creator.accountId,",
                        "          accountType = body.fields.creator.accountType,",
                        "          displayName = body.fields.creator.displayName",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select2, select3 exists(creatorId == user_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select1, select3 exists(creatorId == user_id,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists2",
                        "source2 select(mapColumn(",
                        "          user_id = user_id_PK",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "select2, select3 exists(creatorId == user_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists3",
                        "exists3 alterRow(updateIf(0===0)) ~> alterRow1",
                        "select1, select3 exists(creatorId == user_id,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists4",
                        "exists4 alterRow(updateIf(0===0)) ~> alterRow2",
                        "exists2 split(!isNull (creatorId),",
                        "     disjoint: false) ~> split1@(notnullid)",
                        "alterRow2 split(!isNull(creatorId),",
                        "     disjoint: false) ~> split2@(notNullId)",
                        "split1@notnullid sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id_PK = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id_PK = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink2",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['user_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id_PK = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink3",
                        "split2@notNullId sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id_PK = creatorId,",
                        "          accountType,",
                        "          display_name = displayName",
                        "     )) ~> sink4"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueDetail_API')]",
                "[concat(variables('factoryId'), '/datasets/User_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UserFromProject_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ProjectDetail_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "User_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select2"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     projectId as integer (10000)",
                        "}",
                        "source(output(",
                        "          body as (assigneeType as string, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), components as string[], description as string, entityId as string, expand as string, id as short, isPrivate as boolean, issueTypes as (avatarId as short, description as string, hierarchyLevel as short, iconUrl as string, id as short, name as string, self as string, subtask as boolean)[], key as string, lead as (accountId as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, self as string), name as string, projectTypeKey as string, roles as (Administrator as string, Member as string, Viewer as string, {atlassian-addons-project-access} as string), self as string, simplified as boolean, style as string, uuid as string, versions as (archived as boolean, id as short, name as string, projectId as short, released as boolean, self as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 select(mapColumn(",
                        "          leadId = body.lead.accountId,",
                        "          displayName = body.lead.displayName",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select2, source2 exists(leadId == user_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select2, source2 exists(leadId == user_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id_PK = leadId,",
                        "          display_name = displayName",
                        "     )) ~> sink2",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          user_id_PK as string,",
                        "          display_name as string,",
                        "          accountType as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['user_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          user_id_PK = leadId,",
                        "          display_name = displayName",
                        "     )) ~> sink3"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ProjectDetail_API')]",
                "[concat(variables('factoryId'), '/datasets/User_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Worklog_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Worklog_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Worklog_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Worklog_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Worklog_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10000)",
                        "}",
                        "source(output(",
                        "          body as (maxResults as short, startAt as boolean, total as boolean, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          worklog_id_PK as integer,",
                        "          start_date as date,",
                        "          start_time as string,",
                        "          timespent as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1 foldDown(unroll(body.worklogs, body.worklogs),",
                        "     mapColumn(",
                        "          authorId = body.worklogs.author.accountId,",
                        "          worklogId = body.worklogs.id,",
                        "          issueId = body.worklogs.issueId,",
                        "          started = body.worklogs.started,",
                        "          timeSpent = body.worklogs.timeSpent",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "exists1 derive(startTime = substring(started, 12, 8),",
                        "          startDate = toDate(substring(started,0,10))) ~> derivedColumn1",
                        "flatten1, source2 exists(worklogId == worklog_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1, source2 exists(worklogId == worklog_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists2 derive(startTime = substring(started, 12, 8),",
                        "          startDate = toDate(substring(started,0,10))) ~> derivedColumn2",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          worklog_id_PK as integer,",
                        "          start_date as date,",
                        "          start_time as string,",
                        "          timespent as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          worklog_id_PK = worklogId,",
                        "          timespent = timeSpent,",
                        "          start_time = startTime,",
                        "          start_date = startDate",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          worklog_id_PK as integer,",
                        "          start_date as date,",
                        "          start_time as string,",
                        "          timespent as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['worklog_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          worklog_id_PK = worklogId,",
                        "          timespent = timeSpent,",
                        "          start_time = startTime,",
                        "          start_date = startDate",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Worklog_API')]",
                "[concat(variables('factoryId'), '/datasets/Worklog_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Date_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "Sprint_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source3"
                        },
                        {
                            "dataset": {
                                "referenceName": "Sprint_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source4"
                        },
                        {
                            "dataset": {
                                "referenceName": "Sprint_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source5"
                        },
                        {
                            "dataset": {
                                "referenceName": "Worklog_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source6"
                        },
                        {
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source7"
                        },
                        {
                            "dataset": {
                                "referenceName": "date_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "dateFinal"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "date_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "union1"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "select4"
                        },
                        {
                            "name": "select5"
                        },
                        {
                            "name": "select6"
                        },
                        {
                            "name": "select7"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "aggregate1"
                        },
                        {
                            "name": "split1"
                        },
                        {
                            "name": "exists1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          resolution_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select resolution_date  from issue_dim',",
                        "     format: 'query') ~> source1",
                        "source(output(",
                        "          creation_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     batchSize: 0,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select creation_date from issue_dim',",
                        "     format: 'query') ~> source2",
                        "source(output(",
                        "          start_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select start_date from sprint_dim',",
                        "     format: 'query') ~> source3",
                        "source(output(",
                        "          end_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select end_date from sprint_dim',",
                        "     format: 'query') ~> source4",
                        "source(output(",
                        "          completeDate as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: ' select complete_date as completeDate  from sprint_dim',",
                        "     format: 'query') ~> source5",
                        "source(output(",
                        "          startDate as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: ' select start_Date as startDate from worklog_dim',",
                        "     format: 'query') ~> source6",
                        "source(output(",
                        "          due_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select due_date from issue_dim',",
                        "     format: 'query') ~> source7",
                        "source(output(",
                        "          id as integer,",
                        "          Date as date,",
                        "          Year as integer,",
                        "          Month as integer,",
                        "          Day as integer,",
                        "          MonthName as string,",
                        "          Quarter as integer,",
                        "          Weekday as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> dateFinal",
                        "select1, select2, select3, select4, select5, select6, select7 union(byName: true)~> union1",
                        "source1 select(mapColumn(",
                        "          date = resolution_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "source2 select(mapColumn(",
                        "          date = creation_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "source3 select(mapColumn(",
                        "          date = start_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "source4 select(mapColumn(",
                        "          date = end_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "source5 select(mapColumn(",
                        "          date = completeDate",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select5",
                        "source6 select(mapColumn(",
                        "          date = startDate",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select6",
                        "source7 select(mapColumn(",
                        "          date = due_date",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select7",
                        "aggregate1 derive(year = year(date_deplicate),",
                        "          month = month(date_deplicate),",
                        "          dayMonth = dayOfMonth(date_deplicate),",
                        "          weekday = dayOfWeek(date_deplicate),",
                        "          quarter = iif(month(date_deplicate) <= 3, 1, iif(month(date_deplicate) <= 6, 2, iif(month(date_deplicate) <= 9, 3, 4)))) ~> derivedColumn1",
                        "split1@selectNotNullOnly aggregate(groupBy(date),",
                        "     date_deplicate = max(date)) ~> aggregate1",
                        "exists1 split(!isNull(date),",
                        "     disjoint: false) ~> split1@(selectNotNullOnly)",
                        "union1, dateFinal exists(union1@date == dateFinal@Date,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          date_id as integer,",
                        "          date as date,",
                        "          year as integer,",
                        "          month as integer,",
                        "          quarter as integer,",
                        "          day as integer,",
                        "          weekday as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          date = date_deplicate,",
                        "          year,",
                        "          month,",
                        "          quarter,",
                        "          day = dayMonth,",
                        "          weekday",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Issue_Dim')]",
                "[concat(variables('factoryId'), '/datasets/Sprint_Dim')]",
                "[concat(variables('factoryId'), '/datasets/Worklog_Dim')]",
                "[concat(variables('factoryId'), '/datasets/date_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Time_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Worklog_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Time_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Time_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "aggregate1"
                        },
                        {
                            "name": "exists1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          id as integer,",
                        "          startDate as date,",
                        "          timeSpent as string,",
                        "          startTime as string,",
                        "          author_id as string,",
                        "          issue_id as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: ' select start_Time as startTime from worklog_dim',",
                        "     format: 'query') ~> source1",
                        "source(output(",
                        "          id as integer,",
                        "          Time as string,",
                        "          Hour as integer,",
                        "          Minute as integer,",
                        "          Second as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "aggregate1 derive(hour = substring(startTime, 0, 2),",
                        "          minute = substring(startTime,4, 2),",
                        "          second = substring(startTime, 7)) ~> derivedColumn1",
                        "exists1 aggregate(groupBy(startTime),",
                        "     countWorklog = count(startTime)) ~> aggregate1",
                        "source1, source2 exists(startTime == Time,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          time_id as integer,",
                        "          time as string,",
                        "          hour as integer,",
                        "          minute as integer,",
                        "          second as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          time = startTime,",
                        "          hour,",
                        "          minute,",
                        "          second",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Worklog_Dim')]",
                "[concat(variables('factoryId'), '/datasets/Time_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Worklog_Fact_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Worklog_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Worklog_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "date_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source3"
                        },
                        {
                            "dataset": {
                                "referenceName": "Time_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source4"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Worklog_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Worklog_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn2"
                        },
                        {
                            "name": "lookup1"
                        },
                        {
                            "name": "lookup2"
                        },
                        {
                            "name": "lookup3"
                        },
                        {
                            "name": "lookup4"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10000)",
                        "}",
                        "source(output(",
                        "          body as (maxResults as short, startAt as boolean, total as boolean, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          issue_id_FK as integer,",
                        "          worklog_id_FK as integer,",
                        "          author_id_FK as string,",
                        "          startTime_FK as integer,",
                        "          startDate_FK as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source(output(",
                        "          date_id as integer,",
                        "          date as date,",
                        "          year as integer,",
                        "          month as integer,",
                        "          quarter as integer,",
                        "          day as integer,",
                        "          weekday as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source3",
                        "source(output(",
                        "          time_id as integer,",
                        "          time as string,",
                        "          hour as integer,",
                        "          minute as integer,",
                        "          second as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source4",
                        "source1 foldDown(unroll(body.worklogs, body.worklogs),",
                        "     mapColumn(",
                        "          authorId = body.worklogs.author.accountId,",
                        "          worklogId = body.worklogs.id,",
                        "          issueId = body.worklogs.issueId,",
                        "          started = body.worklogs.started,",
                        "          created = body.worklogs.created",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "exists1 derive(startTime = substring(started, 12, 8),",
                        "          startDate = toDate(substring(started,0,10))) ~> derivedColumn1",
                        "flatten1, source2 exists(worklogId == worklog_id_FK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1, source2 exists(worklogId == worklog_id_FK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "lookup2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists2 derive(startTime = substring(started, 12, 8),",
                        "          startDate = toDate(substring(started,0,10))) ~> derivedColumn2",
                        "derivedColumn2, source3 lookup(startDate == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup1",
                        "lookup1, source4 lookup(startTime == time,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup2",
                        "derivedColumn1, source3 lookup(startDate == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup3",
                        "lookup3, source4 lookup(startTime == time,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup4",
                        "lookup4 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          issue_id_FK as integer,",
                        "          worklog_id_FK as integer,",
                        "          author_id_FK as string,",
                        "          startTime_FK as integer,",
                        "          startDate_FK as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          issue_id_FK = issueId,",
                        "          worklog_id_FK = worklogId,",
                        "          author_id_FK = authorId,",
                        "          startTime_FK = time_id,",
                        "          startDate_FK = date_id",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          issue_id_FK as integer,",
                        "          worklog_id_FK as integer,",
                        "          author_id_FK as string,",
                        "          startTime_FK as integer,",
                        "          startDate_FK as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['worklog_id_FK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          issue_id_FK = issueId,",
                        "          worklog_id_FK = worklogId,",
                        "          author_id_FK = authorId,",
                        "          startTime_FK = date_id,",
                        "          startDate_FK = time_id",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Worklog_API')]",
                "[concat(variables('factoryId'), '/datasets/Worklog_Fact')]",
                "[concat(variables('factoryId'), '/datasets/date_Dim')]",
                "[concat(variables('factoryId'), '/datasets/Time_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Sprint_Fact_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Sprint_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Sprint_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "date_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "DateDim"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Sprint_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "Sprint_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "derivedColumn2"
                        },
                        {
                            "name": "lookup1"
                        },
                        {
                            "name": "lookup2"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "lookup3"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "lookup4"
                        },
                        {
                            "name": "select4"
                        },
                        {
                            "name": "lookup5"
                        },
                        {
                            "name": "select5"
                        },
                        {
                            "name": "lookup6"
                        },
                        {
                            "name": "select6"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "derivedColumn3"
                        },
                        {
                            "name": "derivedColumn4"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     boardId as integer (5)",
                        "}",
                        "source(output(",
                        "          body as (isLast as boolean, maxResults as short, startAt as boolean, total as short, values as (completeDate as string, createdDate as string, endDate as string, goal as string, id as short, name as string, originBoardId as short, self as string, startDate as string, state as string)[]),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          sprint_id_FK as integer,",
                        "          board_id_FK as integer,",
                        "          complete_date_FK as integer,",
                        "          start_date_FK as integer,",
                        "          end_date_FK as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source(output(",
                        "          date_id as integer,",
                        "          date as date,",
                        "          year as integer,",
                        "          month as integer,",
                        "          quarter as integer,",
                        "          day as integer,",
                        "          weekday as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> DateDim",
                        "source1 foldDown(unroll(body.values, body.values),",
                        "     mapColumn(",
                        "          id = body.values.id,",
                        "          startDate = body.values.startDate,",
                        "          endDate = body.values.endDate,",
                        "          completeDate = body.values.completeDate,",
                        "          originBoardId = body.values.originBoardId",
                        "     ),",
                        "     skipDuplicateMapInputs: false,",
                        "     skipDuplicateMapOutputs: false) ~> flatten1",
                        "exists1 derive(endDateFinal = toDate(substring(endDate,0,10)),",
                        "          startDateFinal = toDate(substring(startDate,0,10)),",
                        "          completeDateFinal = toDate(substring(completeDate,0,10)),",
                        "          EnRetard = iif(\r",
                        "    toDate(endDate) < toDate(completeDate)\r",
                        "    || (isNull(completeDate) && toDate(endDate) < currentDate()), \r",
                        "    1, \r",
                        "    0\r",
                        ")) ~> derivedColumn1",
                        "flatten1, source2 exists(id == sprint_id_FK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1, source2 exists(id == sprint_id_FK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 derive(endDateFinal = toDate(substring(endDate,0,10)),",
                        "          startDateFinal = toDate(substring(startDate,0,10)),",
                        "          completeDateFinal = toDate(substring(completeDate,0,10))) ~> derivedColumn2",
                        "derivedColumn2, DateDim lookup(startDateFinal == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup1",
                        "select1, DateDim lookup(endDateFinal == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup2",
                        "lookup1 select(mapColumn(",
                        "          id,",
                        "          originBoardId,",
                        "          endDateFinal,",
                        "          completeDateFinal,",
                        "          start_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "lookup2 select(mapColumn(",
                        "          id,",
                        "          originBoardId,",
                        "          completeDateFinal,",
                        "          start_date_id,",
                        "          end_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select2, DateDim lookup(completeDateFinal == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup3",
                        "lookup3 select(mapColumn(",
                        "          id,",
                        "          originBoardId,",
                        "          start_date_id,",
                        "          end_date_id,",
                        "          complete_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "derivedColumn1, DateDim lookup(startDateFinal == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup4",
                        "lookup4 select(mapColumn(",
                        "          id,",
                        "          originBoardId,",
                        "          endDateFinal,",
                        "          completeDateFinal,",
                        "          start_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "select4, DateDim lookup(endDateFinal == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup5",
                        "lookup5 select(mapColumn(",
                        "          id,",
                        "          originBoardId,",
                        "          completeDateFinal,",
                        "          start_date_id,",
                        "          end_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select5",
                        "select5, DateDim lookup(completeDateFinal == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup6",
                        "lookup6 select(mapColumn(",
                        "          id,",
                        "          originBoardId,",
                        "          start_date_id,",
                        "          end_date_id,",
                        "          complete_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select6",
                        "derivedColumn3 alterRow(updateIf(0===0)) ~> alterRow1",
                        "select3 derive(finalStartDate_id = iif(isNull(start_date_id),1,start_date_id),",
                        "          finalEndDate_id = iif(isNull(end_date_id),1,end_date_id),",
                        "          finalCompleteDate_id = iif(isNull(complete_date_id),1,complete_date_id)) ~> derivedColumn3",
                        "select6 derive(finalStartDate_id = iif(isNull(start_date_id),1,start_date_id),",
                        "          finalEndDate_id = iif(isNull(end_date_id),1,end_date_id),",
                        "          finalCompleteDate_id = iif(isNull(complete_date_id),1,complete_date_id)) ~> derivedColumn4",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_id_FK as integer,",
                        "          board_id_FK as integer,",
                        "          complete_date_FK as integer,",
                        "          start_date_FK as integer,",
                        "          end_date_FK as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['sprint_id_FK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          sprint_id_FK = id,",
                        "          board_id_FK = originBoardId,",
                        "          complete_date_FK = finalCompleteDate_id,",
                        "          start_date_FK = finalStartDate_id,",
                        "          end_date_FK = finalEndDate_id",
                        "     )) ~> sink2",
                        "derivedColumn4 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          sprint_id_FK as integer,",
                        "          board_id_FK as integer,",
                        "          complete_date_FK as integer,",
                        "          start_date_FK as integer,",
                        "          end_date_FK as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'allErrors',",
                        "     transactionCommit: 'single',",
                        "     reportSuccessOnError: true,",
                        "     mapColumn(",
                        "          sprint_id_FK = id,",
                        "          board_id_FK = originBoardId,",
                        "          complete_date_FK = finalCompleteDate_id,",
                        "          start_date_FK = finalStartDate_id,",
                        "          end_date_FK = finalEndDate_id",
                        "     )) ~> sink3"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Sprint_API')]",
                "[concat(variables('factoryId'), '/datasets/Sprint_Fact')]",
                "[concat(variables('factoryId'), '/datasets/date_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Issue_Fact_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "IssueDetail_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Issue_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "source4"
                        },
                        {
                            "dataset": {
                                "referenceName": "date_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source5"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Issue_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Issue_Fact",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "select4"
                        },
                        {
                            "name": "select5"
                        },
                        {
                            "name": "lookup1"
                        },
                        {
                            "name": "lookup2"
                        },
                        {
                            "name": "lookup3"
                        },
                        {
                            "name": "lookup4"
                        },
                        {
                            "name": "select6"
                        },
                        {
                            "name": "lookup5"
                        },
                        {
                            "name": "select7"
                        },
                        {
                            "name": "lookup6"
                        },
                        {
                            "name": "select8"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "derivedColumn2"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     id as integer (10003)",
                        "}",
                        "source(output(",
                        "          body as (expand as string, fields as (aggregateprogress as (percent as short, progress as integer, total as integer), aggregatetimeestimate as integer, aggregatetimeoriginalestimate as string, aggregatetimespent as integer, assignee as string, attachment as string[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as string[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10015 as date, customfield_10017 as string, customfield_10019 as string, customfield_10021 as string, customfield_10032 as string, description as string, duedate as date, environment as string, fixVersions as string[], issuelinks as string[], issuerestriction as (shouldDisplay as boolean), issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, priority as (iconUrl as string, id as short, name as string, self as string), progress as (percent as short, progress as integer, total as integer), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as string, resolutiondate as string, security as string, status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as integer, timeoriginalestimate as string, timespent as integer, timetracking as (remainingEstimate as double, remainingEstimateSeconds as integer, timeSpent as string, timeSpentSeconds as integer), updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as boolean, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]), workratio as short), id as short, key as string, self as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          issue_id_FK as integer,",
                        "          project_id_FK as integer,",
                        "          issueType_id_FK as integer,",
                        "          issueStatus_id_FK as integer,",
                        "          priority_id_FK as integer,",
                        "          creator_id_FK as string,",
                        "          creation_date_FK as integer,",
                        "          resolution_date_FK as integer,",
                        "          due_date_FK as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source4",
                        "source(output(",
                        "          date_id as integer,",
                        "          date as date,",
                        "          year as integer,",
                        "          month as integer,",
                        "          quarter as integer,",
                        "          day as integer,",
                        "          weekday as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source5",
                        "source1 select(mapColumn(",
                        "          issue_id = body.id,",
                        "          project_id = body.fields.project.id,",
                        "          type_id = body.fields.issuetype.id,",
                        "          priority_id = body.fields.priority.id,",
                        "          status_id = body.fields.status.id,",
                        "          account_id = body.fields.creator.accountId,",
                        "          duedate = body.fields.duedate,",
                        "          total = body.fields.progress.total,",
                        "          progress = body.fields.progress.progress,",
                        "          percent = body.fields.progress.percent,",
                        "          progress = body.fields.aggregateprogress.progress,",
                        "          progress = body.fields.aggregateprogress.total,",
                        "          percent = body.fields.aggregateprogress.percent,",
                        "          aggregatetimeestimate = body.fields.aggregatetimeestimate,",
                        "          aggregatetimespent = body.fields.aggregatetimespent,",
                        "          resolution = body.fields.resolution,",
                        "          resolutiondate = body.fields.resolutiondate,",
                        "          created = body.fields.created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select1, source4 exists(issue_id == issue_id_FK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "select1, source4 exists(issue_id === issue_id_FK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "derivedColumn1 alterRow(updateIf(0===0)) ~> alterRow1",
                        "lookup1 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          duedate,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          duedate_id = date_id,",
                        "          created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "lookup2 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          duedate,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          duedate_id,",
                        "          resolutiondate_id = date_id,",
                        "          created",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "lookup3 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          duedate_id,",
                        "          resolutiondate_id,",
                        "          created_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select5",
                        "exists2, source5 lookup(duedate == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup1",
                        "select3, source5 lookup(toDate(substring(resolutiondate, 0, 10), 'yyyy-MM-dd') == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup2",
                        "select4, source5 lookup(toDate(substring(created, 0, 10), 'yyyy-MM-dd') == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup3",
                        "exists1, source5 lookup(duedate === date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup4",
                        "lookup4 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          created,",
                        "          due_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select6",
                        "select6, source5 lookup(toDate(substring(resolutiondate, 0, 10), 'yyyy-MM-dd') == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup5",
                        "lookup5 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          created,",
                        "          due_date_id,",
                        "          resolutiondate_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select7",
                        "select7, source5 lookup(toDate(substring(created, 0, 10), 'yyyy-MM-dd') == date,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'both')~> lookup6",
                        "lookup6 select(mapColumn(",
                        "          issue_id,",
                        "          project_id,",
                        "          type_id,",
                        "          priority_id,",
                        "          status_id,",
                        "          account_id,",
                        "          total,",
                        "          progress,",
                        "          percent,",
                        "          aggregatetimeestimate,",
                        "          aggregatetimespent,",
                        "          resolution,",
                        "          resolutiondate,",
                        "          created,",
                        "          due_date_id,",
                        "          resolutiondate_id,",
                        "          created_date_id = date_id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select8",
                        "select5 derive(creation_dateId = iif(isNull(created_date_id),1,created_date_id),",
                        "          due_dateId = iif(isNull(duedate_id),1,duedate_id),",
                        "          resolution_dateId = iif(isNull(resolutiondate_id),27,resolutiondate_id)) ~> derivedColumn1",
                        "select8 derive(creation_dateId = iif(isNull(created_date_id),1,created_date_id),",
                        "          resolution_dateId = iif(isNull(resolutiondate_id),1,resolutiondate_id),",
                        "          due_dateId = iif(isNull(due_date_id),27,due_date_id)) ~> derivedColumn2",
                        "derivedColumn2 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          issue_id_FK as integer,",
                        "          project_id_FK as integer,",
                        "          issueType_id_FK as integer,",
                        "          issueStatus_id_FK as integer,",
                        "          priority_id_FK as integer,",
                        "          creator_id_FK as string,",
                        "          creation_date_FK as integer,",
                        "          resolution_date_FK as integer,",
                        "          due_date_FK as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          issue_id_FK = issue_id,",
                        "          issueType_id_FK = type_id,",
                        "          issueStatus_id_FK = status_id,",
                        "          priority_id_FK = priority_id,",
                        "          creator_id_FK = account_id,",
                        "          creation_date_FK = creation_dateId,",
                        "          resolution_date_FK = resolution_dateId,",
                        "          due_date_FK = due_dateId,",
                        "          project_id_FK = project_id",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          issue_id_FK as integer,",
                        "          project_id_FK as integer,",
                        "          issueType_id_FK as integer,",
                        "          issueStatus_id_FK as integer,",
                        "          priority_id_FK as integer,",
                        "          creator_id_FK as string,",
                        "          creation_date_FK as integer,",
                        "          resolution_date_FK as integer,",
                        "          due_date_FK as integer",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:false,",
                        "     updateable:true,",
                        "     upsertable:true,",
                        "     keys:['issue_id_FK','project_id_FK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          issue_id_FK = issue_id,",
                        "          project_id_FK = project_id,",
                        "          issueType_id_FK = type_id,",
                        "          issueStatus_id_FK = status_id,",
                        "          priority_id_FK = priority_id,",
                        "          creator_id_FK = account_id,",
                        "          creation_date_FK = creation_dateId,",
                        "          resolution_date_FK = resolution_dateId,",
                        "          due_date_FK = due_dateId",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/IssueDetail_API')]",
                "[concat(variables('factoryId'), '/datasets/Issue_Fact')]",
                "[concat(variables('factoryId'), '/datasets/date_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IssueStatus_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Status_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueStatus_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "IssueStatus_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "IssueStatus_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "select2"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          body as (description as string, iconUrl as string, id as short, name as string, scope as (project as (id as short), type as string), self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string), untranslatedName as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          status_id_PK as integer,",
                        "          status_name as string,",
                        "          statusCategory as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1, source2 exists(body.id == status_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "source1, source2 exists(body.id == status_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "select2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists2 select(mapColumn(",
                        "          id = body.id,",
                        "          name = body.name,",
                        "          category = body.statusCategory.name",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          status_id_PK as integer,",
                        "          status_name as string,",
                        "          statusCategory as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          status_id_PK = body.id,",
                        "          status_name = body.name,",
                        "          statusCategory = body.statusCategory.name",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          status_id_PK as integer,",
                        "          status_name as string,",
                        "          statusCategory as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['status_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          status_id_PK = id,",
                        "          status_name = name,",
                        "          statusCategory = category",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Status_API')]",
                "[concat(variables('factoryId'), '/datasets/IssueStatus_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Priority_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Priority_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Priority_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Priority_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Priority_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "exists2"
                        },
                        {
                            "name": "alterRow1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          body as (description as string, iconUrl as string, id as short, name as string, self as string, statusColor as string),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
                        "source(output(",
                        "          priority_id_PK as integer,",
                        "          priority_name as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source2",
                        "source1, source2 exists(body.id == priority_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "source1, source2 exists(body.id == priority_id_PK,",
                        "     negate:false,",
                        "     broadcast: 'both')~> exists2",
                        "exists2 alterRow(updateIf(0===0)) ~> alterRow1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          priority_id_PK as integer,",
                        "          priority_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          priority_id_PK = body.id,",
                        "          priority_name = body.name",
                        "     )) ~> sink1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          priority_id_PK as integer,",
                        "          priority_name as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:false,",
                        "     keys:['priority_id_PK'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          priority_id_PK = body.id,",
                        "          priority_name = body.name",
                        "     )) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Priority_API')]",
                "[concat(variables('factoryId'), '/datasets/Priority_Dim')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Issue_IDs_DF')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Issue_API",
                                "type": "DatasetReference"
                            },
                            "name": "extractIssueData"
                        },
                        {
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Issue_Dim",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "flatten1"
                        },
                        {
                            "name": "exists1"
                        },
                        {
                            "name": "select2"
                        },
                        {
                            "name": "aggregate1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     boardId as integer (5)",
                        "}",
                        "source(output(",
                        "          body as (expand as string, issues as (expand as string, fields as (aggregateprogress as (percent as short, progress as integer, total as integer), aggregatetimeestimate as integer, aggregatetimeoriginalestimate as string, aggregatetimespent as integer, assignee as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), attachment as string[], closedSprints as (completeDate as string, createdDate as string, endDate as string, goal as string, id as short, name as string, originBoardId as short, self as string, startDate as string, state as string)[], comment as (comments as string[], maxResults as boolean, self as string, startAt as boolean, total as boolean), components as string[], created as string, creator as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), customfield_10001 as string, customfield_10015 as date, customfield_10016 as string, customfield_10017 as string, customfield_10019 as string, customfield_10020 as (boardId as short, completeDate as string, endDate as string, goal as string, id as short, name as string, startDate as string, state as string)[], customfield_10021 as string, customfield_10032 as string, description as string, duedate as date, environment as string, epic as string, fixVersions as (archived as boolean, description as string, id as short, name as string, releaseDate as date, released as boolean, self as string)[], flagged as boolean, issuelinks as string[], issuerestriction as (shouldDisplay as boolean), issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), labels as string[], lastViewed as string, parent as (fields as (issuetype as (avatarId as short, description as string, entityId as string, hierarchyLevel as boolean, iconUrl as string, id as short, name as string, self as string, subtask as boolean), priority as (iconUrl as string, id as short, name as string, self as string), status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), summary as string), id as short, key as string, self as string), priority as (iconUrl as string, id as short, name as string, self as string), progress as (percent as short, progress as integer, total as integer), project as (avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), id as short, key as string, name as string, projectTypeKey as string, self as string, simplified as boolean), reporter as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), resolution as (description as string, id as short, name as string, self as string), resolutiondate as string, security as string, sprint as (createdDate as string, endDate as string, goal as string, id as short, name as string, originBoardId as short, self as string, startDate as string, state as string), status as (description as string, iconUrl as string, id as short, name as string, self as string, statusCategory as (colorName as string, id as short, key as string, name as string, self as string)), statusCategory as (colorName as string, id as short, key as string, name as string, self as string), statuscategorychangedate as string, subtasks as string[], summary as string, timeestimate as integer, timeoriginalestimate as string, timespent as integer, timetracking as (remainingEstimate as string, remainingEstimateSeconds as integer, timeSpent as string, timeSpentSeconds as integer), updated as string, versions as string[], votes as (hasVoted as boolean, self as string, votes as boolean), watches as (isWatching as boolean, self as string, watchCount as boolean), worklog as (maxResults as short, startAt as boolean, total as short, worklogs as (author as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), comment as string, created as string, id as short, issueId as short, self as string, started as string, timeSpent as string, timeSpentSeconds as integer, updateAuthor as (accountId as string, accountType as string, active as boolean, avatarUrls as ({16x16} as string, {24x24} as string, {32x32} as string, {48x48} as string), displayName as string, emailAddress as string, self as string, timeZone as string), updated as string)[]), workratio as short), id as short, key as string, self as string)[], maxResults as short, startAt as boolean, total as short),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> extractIssueData",
                        "source(output(",
                        "          issue_id_PK as integer,",
                        "          Agg_Progress as integer,",
                        "          Agg_Progress_Total as integer,",
                        "          Agg_TimeSpent as integer,",
                        "          Agg_TimeEstimate as integer,",
                        "          creation_date as date,",
                        "          resolution_date as date,",
                        "          due_date as date",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     inferDriftedColumnTypes: true,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source1",
                        "extractIssueData foldDown(unrollMultiple(body.issues,body.issues.fields.worklog.worklogs),",
                        "     mapColumn(",
                        "          id = body.issues.id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> flatten1",
                        "aggregate1, source1 exists(id_id ===issue_id_PK,",
                        "     negate:true,",
                        "     broadcast: 'both')~> exists1",
                        "flatten1 select(mapColumn(",
                        "          id",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select2",
                        "select2 aggregate(groupBy(id),",
                        "     id_id = max(id)) ~> aggregate1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          issue_id_PK as integer,",
                        "          Agg_Progress as integer,",
                        "          Agg_Progress_Total as integer,",
                        "          Agg_TimeSpent as integer,",
                        "          Agg_TimeEstimate as integer,",
                        "          creation_date as date,",
                        "          resolution_date as date,",
                        "          due_date as date",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          issue_id_PK = id_id",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Issue_API')]",
                "[concat(variables('factoryId'), '/datasets/Issue_Dim')]"
            ]
        }
    ]
}
